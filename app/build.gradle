plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.jetbrains.kotlin.android)
}

apply from: 'buildTrace.gradle'
apply from: '../dependencies.gradle'


if (IS_RELEASE_PACKAGE.toBoolean()){

    apply plugin: 'com.tencent.vasdolly'

    //VasDolly插件配置
    //gradle channelDebug/channelRelease 编译生成apk后，再根据生成的Apk生成渠道包
    //gradle channelDebug/channelRelease -Pchannels=yingyongbao,gamecenter 生成指定渠道包
    channel{
        channelFile = file("channel.txt")
        //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
        outputDir = new File(project.buildDir,"channels")
        //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}-${buildTime}
        apkNameFormat ='${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}'
        //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
        fastMode = false
        //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
        buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
        //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
        lowMemory = false
    }

    // gradle rebuildChannel 配置此任务用于不希望重新构建apk，直接根据指定的apk生成渠道包
    //gradle rebuildChannel -Pchannels=yingyongbao,gamecenter 生成指定渠道包
    rebuildChannel {
        channelFile = file("channel.txt")
        //指定的apk生成渠道包,文件名中如果有base将被替换为渠道名，否则渠道名将作为前缀
        baseApk = new File(project.buildDir, "outputs/apk/debug/app-debug.apk")
        //默认为new File(project.buildDir, "rebuildChannel")
        outputDir = new File(project.buildDir, "rebuildChannels")
        //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
        fastMode = false
        //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
        lowMemory = false
    }
}else {
    apply from: 'build_apk.gradle'
}

android {

    namespace 'com.czf.gis'

    compileSdk compile_sdk_version

    defaultConfig {
        applicationId "com.czf.gis"
        versionCode VERSIONCODE.toInteger()
        versionName VERSIONNAME

        minSdk min_sdk_verion
        targetSdk target_sdk_version

        // 动态向string.xml中写入值
        resValue "string", "build_config_package", "${applicationId}"
        resValue "string", "mapbox_access_token", "${MAPBOX_ACCESS_TOKEN}"
        // 仅保留中文语种的资源
        // 仅保留 xxhdpi 图片资源（目前主流分辨率 1920 * 1080）
        resourceConfigurations += ['zh', 'xxhdpi']

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

    }

    if (IS_RELEASE_PACKAGE.toBoolean()){
        buildTypes {
            debug {
                // 给包名添加后缀
                applicationIdSuffix '.debug'
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :   '项目框架Debug版',
                        'icon_launcher' : '@mipmap/ic_launcher',
                        'network_security_config' : '@xml/network_security_config_debug',
                        'UM_KEY' : UMENG_APP_KEY,
                        'QQ_ID' : QQ_APP_ID,
                        'QQ_SECRET' : QQ_APP_SECRET,
                        'WX_ID' : WX_APP_ID,
                        'WX_SECRET' : WX_APP_SECRET
                ])

                // 调试模式开关
                debuggable true
                // 调试模式开关
                jniDebuggable true
                // 压缩对齐开关
                zipAlignEnabled false
                // 移除无用的资源
//            shrinkResources false
                // 代码混淆开关
                minifyEnabled false
                // 签名信息配置
                signingConfig signingConfigs.debug
                // 调试模式下只保留一种架构的 so 库，提升打包速度
                ndk {
                    abiFilters 'arm64-v8a'
                }
            }

            release {
                applicationIdSuffix ''
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :    '@string/app_name',
                        'icon_launcher' : '@mipmap/ic_launcher_release',
                        'network_security_config' : '@xml/network_security_config',
                        'UM_KEY' : UMENG_APP_KEY,
                        'QQ_ID' : QQ_APP_ID,
                        'QQ_SECRET' : QQ_APP_SECRET,
                        'WX_ID' : WX_APP_ID,
                        'WX_SECRET' : WX_APP_SECRET
                ])

                debuggable false
                // 调试模式开关
                jniDebuggable false
                // 压缩对齐开关
                zipAlignEnabled true
                // 移除无用的资源
//            shrinkResources true
                // 代码混淆开关
                minifyEnabled true
                // 签名信息配置
                signingConfig signingConfigs.release
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

                ndk {
                    // armeabi：万金油架构平台（占用率：0%）
                    // armeabi-v7a：曾经主流的架构平台（占用率：10%）
                    // arm64-v8a：目前主流架构平台（占用率：95%）
                    abiFilters 'armeabi-v7a','arm64-v8a'
                    // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
                    //  abiFilters 'arm64-v8a','x86_64' // 64位版本
                }
            }
        }

        productFlavors.configureEach { flavor ->
            flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
        }

    }else {
        buildTypes {
            debug {
                // 给包名添加后缀
                applicationIdSuffix '.debug'
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :   '项目框架Debug版',
                        'icon_launcher' : '@mipmap/ic_launcher',
                        'network_security_config' : '@xml/network_security_config_debug',
                        'UM_KEY' : UMENG_APP_KEY,
                        'QQ_ID' : QQ_APP_ID,
                        'QQ_SECRET' : QQ_APP_SECRET,
                        'WX_ID' : WX_APP_ID,
                        'WX_SECRET' : WX_APP_SECRET
                ])

                // 调试模式开关
                debuggable true
                // 调试模式开关
                jniDebuggable true
                // 压缩对齐开关
                zipAlignEnabled false
                // 移除无用的资源
//            shrinkResources false
                // 代码混淆开关
                minifyEnabled false
                // 签名信息配置
                signingConfig signingConfigs.debug
                // 调试模式下只保留一种架构的 so 库，提升打包速度
                ndk {
                    abiFilters 'arm64-v8a'
                }
            }

            preview.initWith(debug)
            preview {
                applicationIdSuffix '.preview'
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :    '项目框架Preview版',
                        'icon_launcher' : '@mipmap/ic_launcher_preview',
                        'network_security_config' : '@xml/network_security_config_debug',
                        'UM_KEY' : UMENG_APP_KEY,
                        'QQ_ID' : QQ_APP_ID,
                        'QQ_SECRET' : QQ_APP_SECRET,
                        'WX_ID' : WX_APP_ID,
                        'WX_SECRET' : WX_APP_SECRET
                ])
            }

            release {
                applicationIdSuffix ''
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :    '@string/app_name',
                        'icon_launcher' : '@mipmap/ic_launcher_release',
                        'network_security_config' : '@xml/network_security_config',
                        'UM_KEY' : UMENG_APP_KEY,
                        'QQ_ID' : QQ_APP_ID,
                        'QQ_SECRET' : QQ_APP_SECRET,
                        'WX_ID' : WX_APP_ID,
                        'WX_SECRET' : WX_APP_SECRET
                ])

                // 调试模式开关
                debuggable false
                // 调试模式开关
                jniDebuggable false
                // 压缩对齐开关
                zipAlignEnabled true
                // 移除无用的资源
//            shrinkResources true
                // 代码混淆开关
                minifyEnabled true
                // 签名信息配置
                signingConfig signingConfigs.release
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

                ndk {
                    // armeabi：万金油架构平台（占用率：0%）
                    // armeabi-v7a：曾经主流的架构平台（占用率：10%）
                    // arm64-v8a：目前主流架构平台（占用率：95%）
                    abiFilters 'armeabi-v7a','arm64-v8a'
                    // 还可以添加 'x86', 'x86_64', 'mips', 'mips64'
                    //  abiFilters 'arm64-v8a','x86_64' // 64位版本
                }
            }

            prerelease.initWith(release)
            prerelease {
                // 调试模式开关
                debuggable true
                // 调试模式开关
                jniDebuggable true
                minifyEnabled false
            }
        }

        // 打包 使用VasDolly替代自己打包
        applicationVariants.configureEach { variant ->
            // apk 输出文件名配置
            variant.outputs.configureEach { output ->
                // app名称 = app 名字+ 渠道号 + 版本号 + 构建类型
                /*outputFileName = rootProject.getName() + '_' + variant.flavorName + '_v' + variant.versionName + '_' + variant.buildType.name
                if (variant.buildType.name == buildTypes.release.getName()) {
                    outputFileName += '_' + new Date().format('MMdd')
                }*/
                outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name + '_' + new Date().format('MMdd') + '.apk'

            }
        }
    }

}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation project(":network")

    implementation libs.lifecycle.livedata.ktx
    implementation libs.lifecycle.viewmodel.ktx
    implementation libs.lifecycle.viewmodel.savedstate
    implementation libs.lifecycle.runtime.ktx
    implementation libs.lifecycle.common.java8

    implementation libs.navigation.ui
    implementation libs.navigation.ui.ktx
    implementation libs.navigation.fragment
    implementation libs.navigation.fragment.ktx
    implementation libs.navigation.runtime

    implementation libs.room.runtime
    annotationProcessor libs.room.compiler
    ksp libs.room.compiler
    implementation libs.room.ktx
    implementation libs.room.rxjava3

    implementation libs.vasdolly

    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
}