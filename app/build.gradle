plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

apply from: 'buildTrace.gradle'
apply from: '../dependencies.gradle'


if (IS_RELEASE_PACKAGE){

    apply plugin: 'com.tencent.vasdolly'

    //VasDolly插件配置
    //gradle channelDebug/channelRelease 编译生成apk后，再根据生成的Apk生成渠道包
    //gradle channelDebug/channelRelease -Pchannels=yingyongbao,gamecenter 生成指定渠道包
    channel{
        channelFile = file("channel.txt")
        //多渠道包的输出目录，默认为new File(project.buildDir,"channel")
        outputDir = new File(project.buildDir,"channels")
        //多渠道包的命名规则，默认为：${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}-${buildTime}
        apkNameFormat ='${appName}-${versionName}-${versionCode}-${flavorName}-${buildType}'
        //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
        fastMode = false
        //buildTime的时间格式，默认格式：yyyyMMdd-HHmmss
        buildTimeDateFormat = 'yyyyMMdd-HH:mm:ss'
        //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
        lowMemory = false
    }

    // gradle rebuildChannel 配置此任务用于不希望重新构建apk，直接根据指定的apk生成渠道包
    //gradle rebuildChannel -Pchannels=yingyongbao,gamecenter 生成指定渠道包
    rebuildChannel {
        channelFile = file("channel.txt")
        //指定的apk生成渠道包,文件名中如果有base将被替换为渠道名，否则渠道名将作为前缀
        baseApk = new File(project.buildDir, "outputs/apk/debug/app-debug.apk")
        //默认为new File(project.buildDir, "rebuildChannel")
        outputDir = new File(project.buildDir, "rebuildChannels")
        //快速模式：生成渠道包时不进行校验（速度可以提升10倍以上，默认为false）
        fastMode = false
        //低内存模式（仅针对V2签名，默认为false）：只把签名块、中央目录和EOCD读取到内存，不把最大头的内容块读取到内存，在手机上合成APK时，可以使用该模式
        lowMemory = false
    }
}else {
    apply from: 'build_apk.gradle'
}

android {

    defaultConfig {
        applicationId "com.czf.gis"
        versionCode VERSIONCODE as int
        versionName VERSIONNAME

        // 动态向string.xml中写入值
        resValue "string", "build_config_package", "${applicationId}"
        resValue "string", "mapbox_access_token", "${MAPBOX_ACCESS_TOKEN}"
        // 仅保留中文语种的资源
        resConfigs 'zh'
        // 仅保留 xxhdpi 图片资源（目前主流分辨率 1920 * 1080）
        resConfigs 'xxhdpi'
        /*javaCompileOptions {
            annotationProcessorOptions {
                arguments += mapOf(
                        "room.schemaLocation" to "$projectDir/schemas",
                        "room.incremental" to "true"
                )
            }
        }*/

        if (IS_RELEASE_PACKAGE){
            applicationIdSuffix ''
            // 添加清单占位符
            addManifestPlaceholders([
                    'app_name'    :    '@string/app_name',
                    'icon_launcher' : '@mipmap/ic_launcher_release'
            ])
        }
    }

    sourceSets {
        main {
            res.srcDirs(
                    'src/main/res',
            )
        }
    }

    if (!IS_RELEASE_PACKAGE){
        buildTypes {
            debug {
                // 给包名添加后缀
                applicationIdSuffix '.debug'
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :   '项目框架Debug版',
                        'icon_launcher' : '@mipmap/ic_launcher'
                ])
            }

            preview.initWith(debug)
            preview {
                applicationIdSuffix '.preview'
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :    '项目框架Preview版',
                        'icon_launcher' : '@mipmap/ic_launcher_preview'
                ])
            }

            release {
                applicationIdSuffix ''
                // 添加清单占位符
                addManifestPlaceholders([
                        'app_name'    :    '@string/app_name',
                        icon_launcher : '@mipmap/ic_launcher_release'
                ])
            }
        }

        // 打包 使用VasDolly替代自己打包
        applicationVariants.configureEach { variant ->
            // apk 输出文件名配置
            variant.outputs.configureEach { output ->
                // app名称 = app 名字+ 渠道号 + 版本号 + 构建类型
                /*outputFileName = rootProject.getName() + '_' + variant.flavorName + '_v' + variant.versionName + '_' + variant.buildType.name
                if (variant.buildType.name == buildTypes.release.getName()) {
                    outputFileName += '_' + new Date().format('MMdd')
                }*/
                outputFileName = rootProject.getName() + '_v' + variant.versionName + '_' + variant.buildType.name + '_' + new Date().format('MMdd') + '.apk'

            }
        }
    }

}

dependencies {
    implementation project(":network")
}